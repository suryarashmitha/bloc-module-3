>In your own words, explain what clean code is and why it is important.

A: When we talk about clean code, we talk about reader-focused development style that produces software that’s easy to write, read and maintain. Clean code is code that is easy to understand and easy to change.Your code should be as efficient, readable, and maintainable as possible, and instead of only solving the problem, you should always put a bit of extra time to also focus on the design of your code, on architecture. Because your code should be understandable, should be clean. This means the code is easy to read, whether that reader is the original author of the code or somebody else. There shouldn’t be doubts and misunderstandings.Also, it is extremely important to have this ability to easily extend and refactor your code. This can be achieved if the person making the changes understands the code and also feels confident that the changes introduced in the code do not break any existing functionality.


>Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on computers and explain what would happen if the code was not created to an acceptable standard.

A: If the code is sloppy I mean not created to an acceptable standard to talk in big like this Toyota incident there would be lot of disasters like airplane can crash, satellite too; now a days almost everything is dependent, malfunctioning of heart monitor can lead to patient's death etc. 


> Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

A: `print z` statement is repeated so I made a small change.
Refactored Code:

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius                       
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 END IF
 PRINT z                       // Print result
END FUNCTION


> Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

A: Code is clean.


> Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION


A: Refactored code:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
    due = subTotal * discountRate + (subTotal * tax)
   CALL getPayment RETURNING amount
   IF paymentType = 'CASH' THEN
       PRINT "Change due: " + amount - due
   ELSE IF paymentType = 'CREDIT CARD' THEN
       PRINT "Your credit card has been charged: " + due  
 END IF
 PRINT "Your total due is: " + due
END FUNCTION


b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

A:  Refactored code:

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT guest.hasOverdueBooks AND guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

A: I think code is clean.


### Programming Questions

> Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.

A:
function squareInt(arr) {
	let sum = arr.reduce((prev, cur) => prev + cur);
	let sqrRoot = Math.sqrt(sum);
	
	if (Math.pow(sqrRoot, 2) === sum) {
		return sqrRoot;
	} else {
		return sum;
	}
}

console.log(squareInt([1,1]));
console.log(squareInt([10,1,4,6,1,1,2])); 

Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, and false if every element is distinct.

A:
function isDuped(arr) 
{
	let sortedArr = arr.sort((a,b) => a - b);

	for (let i = 0; i < sortedArr.length; i++) {
		return sortedArr[i] === sortedArr[i+1];
	}

}
console.log(isDuped([10,1,4,6,1,1,2])); 
console.log(isDuped([10,1,3,2])); 
console.log(isDuped([1,1]));


###Extra Credit

> Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert the strings to arrays.

A: function isAnagram (str1, str2) {
  function sortedString(str){
    return str.split("").sort().join("");
  }

   return sortedString(str1) === sortedString(str2) 
     ?  str1 + " and " + str2 + " are anagrams!"
     :  str1 + " and " + str2 + " are not anagrams.";
  
}

console.log(isAnagram('spar','rasp')); 
console.log(isAnagram('foo','fooo')); 


