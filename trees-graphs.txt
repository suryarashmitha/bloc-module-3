#### Questions

> What is a binary tree and what makes it unique to other trees?

A: A binary tree is a data structure that starts with root data and branches in two directions, left and right. Each child node branches into two (left and right) as well, and the structure continues to do so with all of its data.

> What is a heuristic?

A: A heuristic is the guesses an algorithm makes, which sacrifice accuracy in order to solve the problem quicker.

> What is another problem besides the shortest-path problem that requires the use of heuristics?

A: Searching for a specific node from a binary tree that consists of 1000 nodes.

> What is the difference between a depth-first search and a breadth-first search?

A: Depth-First and Breadth-First, Both are algorithms used for traversing or searching tree or graph data structures. In DFS we start at the root and explore as far as possible along each branch before backtracking. In BFS we start at the tree root and explore the neighbour nodes first, before moving to the next level neighbours. 

> Explain in your own words what an undirected, a-cyclic, unweighted graph is.

A: IN an undirected graph, the edge connecting two nodes is ambiguous. It neither starts nor ends at either Node, it merely connects the two like hands in a handshake. In a-cyclic  graph, Nodes don't form loops; performing a DFS of an A-cyclic Graph will result in a dead-end. Unweighted graphs do not assign cost of travel between nodes. 

> What kind of graph is a binary search tree?

A:Directed, a-cyclic and unweighted graphs.

####Programming Questions

1. Given a Binary Search Tree and a value, write a function that checks to see whether the value exists within the tree.

—>Example: The value 10 exists in the tree. The value 23 does not exist in the tree.

A: Starting at root, check left and right branches to see if value exists, return true if so, false if not.

function checkValuePresence(value){
  let current = this.root;
  while (current){
    if (value === current.value){
      return true;
    }
    else if (value < current.value){
      current = current.left;
    }
    else {
      current = current.right;
    }
   }
   return false;
 }
checkValuePresence();

2. Given a Binary Search Tree and two nodes, n1 and n2, write a function that finds the distance between the two nodes.


—> Example: The distance between the nodes 4 and 10 is 4. The distance between the nodes 8 and 10 is 1. The distance between the nodes 1 and 14 is 4.

A: Add distance between n1 and root and n2 and root and subtract 2*distance between root and lowest common ancestor.


function findDistance(root, n1, n2){
  var x = findPathLength(root, n1);
  var y = findPathLength(root, n2);
  var lowestAncestor = findLowestCommonAncestor(root, n1, n2);
  var z = 2*findPathLength(root, lowestAncestor);

  return x + y - z;
}

function findPathLength(root, n){
   if(root !== null){
      var distance = 0;
   if(root === null){
      return distance;
   } else if(root > n){
     distance = 1 + findPathLength(root.left, n);
   } distance = 1 + findPathLength(root.right, n);
 } return 0;
}

function findLowestCommonAncestor (root, n1, n2) {
   if(root === 0){
      return null;
   }
   if(root > n1 && root > n2){
      return findLowestCommonAncestor(root.left, n1, n2);
   }
   else if(root < n1 && root < n2){
      return findLowestCommonAncestor(root.right, n1, n2);
   }
   return root;
}